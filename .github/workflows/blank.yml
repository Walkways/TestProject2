name: Terraform Apply

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      GCP_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}
      # Ajoutez d'autres variables d'environnement GCP au besoin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform init
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

          # Generates an execution plan for Terraform
      - name: Terraform Plan
        run: terraform plan -input=false -var="db_password=votre_mot_de_passe"
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Terraform Apply      
        run: terraform apply -auto-approve -input=false -var="db_password=votre_mot_de_passe"          
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      #- name: Install jq
      #  run: |
      #    sudo apt-get update
      #    sudo apt-get install jq


      #- name: Terraform Output
      #  run: echo "::set-output name=ip_address::$(terraform output)"
      #  env:
      #    GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      #- name: Use IP Address
      #  run: |
      #    extracted_ip="${{ steps.extract_ip.outputs.ip_address }}"
      #    echo "Extracted IP Address: $extracted_ip"
          # Utilisez extracted_ip dans d'autres commandes ou scripts.


      #- name: Set Environment Variable
      #  run: echo "MA_VARIABLE=ma_valeur" >> $GITHUB_ENV



      #- name: EXP la Variable d'Environnement
      #  run: echo "CUSTOM_VAR=IT WORKS" >> $GITHUB_ENV       

      #- name: Use la Variable d'Environnement        
      #  run: echo $CUSTOM_VAR # OK



        


          
      #- name: Try
      #  run: |
      #    output=$(terraform output database_ip)
      #    echo $output
      #  env:
      #    GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      #- name: Final Print Variable
      #  run:  $output

        


      - name: Set Output Variable
        id: set_output
        run: |
          output=$(terraform output database_ip)
          echo "::set-output name=output::${output}"
          echo "TF_OUTPUT=${output}" >> $GITHUB_ENV
        env:
          GOOGLE_CREDENTIALS: ${{ secrets.GCP_CREDENTIALS }}

      - name: Use Exported Variable
        run: echo $TF_OUTPUT
        

      - name: Install Python For GCLOUD
        uses: actions/setup-python@v4
        with:
              python-version: '3.9'



      #- name: Setup Google Cloud SDK
      #  uses: google-github-actions/setup-gcloud@v0
      #  with:
      #    version: '318.0.0'
      #    project_id: ${{ secrets.GCP_PROJECT_ID }}
      #    service_account_key: ${{ secrets.GCP_CREDENTIALS }}
      #    export_default_credentials: true



      - name: Set up Google Cloud CLI authentication
        uses: google-github-actions/auth@v0
        with:
          credentials: ${{ secrets.GCP_CREDENTIALS }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}




      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_CREDENTIALS }}
          export_default_credentials: true


      - name: Install gke-gcloud-auth-plugin
        run: |
          gcloud components install kubectl
          gcloud components install gke-gcloud-auth-plugin

      - name: Authentification GCP
        run: |
          echo "$GCP_SERVICE_ACCOUNT_KEY" > gcp-key.json
          gcloud auth activate-service-account --key-file=gcp-key.json          
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}
          gcloud container clusters get-credentials mon-cluster --region=us-central1
        env:
          GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.GCP_CREDENTIALS }}


          
      
      

      - name: Kubectl Commands Test
        run: |          
          kubectl apply -f service.yaml
          kubectl delete configmap mon-app-config || true
          kubectl create configmap mon-app-config --from-literal=BDD_IP=$TF_OUTPUT --from-literal=BDD_MDP=votre_mot_de_passe
          kubectl apply -f deployment.yaml
          kubectl get services
          
          

